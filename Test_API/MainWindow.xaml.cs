using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Policy;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using AForge.Video;
using AForge.Video.DirectShow;
using CaptureScreen;
using InferenceEngine;

namespace WPF_IE_API
{
    public struct Result7
    {
        public float image_id;
        public float class_id;
        public float conf;
        public float x_min;
        public float y_min;
        public float x_max;
        public float y_max;

        public System.Drawing.Rectangle GetRect(System.Drawing.Size frame, float scale = 1.0f)
        {
            int x = (int)(x_min * frame.Width);
            int y = (int)(y_min * frame.Height);
            int w = (int)(x_max * frame.Width) - x;
            int h = (int)(y_max * frame.Height) - y;

            return new System.Drawing.Rectangle(x, y, w, h);
        }

        public override string ToString()
        {
            return $"image_id:{image_id} class_id:{class_id} conf:{conf} [{x_min},{y_min},{x_max},{y_max}]";
        }
    }


    /// <summary>
    /// MainWindow.xaml 的交互逻辑
    /// </summary>
    public partial class MainWindow : Window
    {
        Core core;
        CNNNetwork network;
        InputInfo[] inputs;
        OutputInfo[] outputs;
        ExecutableNetwork exec_network;
        InferRequest request;

        private List<Result7> results = new List<Result7>(200);

        private Bitmap bitmap;
        private BitmapData bitmapData;

        private System.Drawing.Rectangle lockRect;
        private VideoCaptureDevice _capture;

        private MemoryStream ms = new MemoryStream();

        public MainWindow()
        {
            InitializeComponent();

            OpenCapture("0");
        }

        protected override void OnClosing(CancelEventArgs e)
        {
            base.OnClosing(e);
            if(_capture != null)
            {
                _capture.NewFrame -= CaptureDevice_NewFrame;
                if (_capture.IsRunning) _capture.SignalToStop();

                _capture = null;
            }
        }

        private void LoadOpenVINO(string modelFile, string deviceName = "CPU")
        {
            // --------------------------- 1. Load inference engine instance -------------------------------------
            core = new Core();

            // --------------------------- 2. Read IR Generated by ModelOptimizer (.xml and .bin files) ------------
            network = core.ReadNetwork(modelFile);

            // --------------------------- 3. Configure input & output ---------------------------------------------
            // --------------------------- 3.1 Prepare input blobs -----------------------------------------------------
            inputs = network.GetInputsInfo();
            inputs[0].Precision = Precision.U8;
            inputs[0].Layout = Layout.NHWC;
            inputs[0].ResizeAlgorithm = ResizeAlgorithm.RESIZE_BILINEAR;

            // --------------------------- 3.2 Prepare output blobs ----------------------------------------------------
            outputs = network.GetOutputsInfo();
            outputs[0].Precision = Precision.FP32;

            // --------------------------- 4. Loading model to the device ------------------------------------------
            exec_network = core.LoadNetwork(network, deviceName, new CoreConfig("", ""));

            // --------------------------- 5. Create infer request -------------------------------------------------
            request = exec_network.CreateInferRequest();
            //request.SetCompletionCallback(HandleInferResults);
            Console.WriteLine("OpenVINO Configuration Complete ...");

            // --------------------------- 6. Prepare input --------------------------------------------------------
            //ResetRequest(bitmapData);

            // --------------------------- 7. Do inference --------------------------------------------------------
            // --------------------------- 8. Process output ------------------------------------------------------
        }

        private void ResetRequest(BitmapData bmpd)
        {
            if (bmpd == null) return;

            TensorDesc tensorDesc = new TensorDesc()
            {
                Layout = Layout.NHWC,
                Dims = new Dimensions(1, 3, (ulong)bmpd.Height, (ulong)bmpd.Width),
                Precision = Precision.U8
            };

            //bitmap.Save(ms, ImageFormat.Bmp);
            //ms.Seek(0, SeekOrigin.Begin);
            //Blob blob = Blob.MakeMemoryFromPreallocated(ref tensorDesc, ms.GetBuffer());

            Blob blob = Blob.MakeMemoryFromPreallocated(ref tensorDesc, bmpd.Scan0, (ulong)(bmpd.Width * bmpd.Height * 3));
            request.SetBlob(inputs[0].Name, blob);
            //request.SetCompletionCallback(HandleInferResults);

            request.StartAsync();
        }

        private void OpenCapture(string nameORIndex)
        {
            string deviceMoniker;
            if (AForgeCaptureDevice.TryGetDeviceMoniker(nameORIndex, out deviceMoniker))
            {
                _capture = new VideoCaptureDevice(deviceMoniker);

                VideoCapabilities vCapabilities;
                if (AForgeCaptureDevice.TryGetDeviceVideoResolution(_capture, new System.Drawing.Size(640, 480), out vCapabilities))
                    _capture.VideoResolution = vCapabilities;

                _capture.NewFrame += CaptureDevice_NewFrame;
                _capture.Start();
            }
        }

        /// <summary>
        /// Captrue Device New Frame Event Handler
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void CaptureDevice_NewFrame(object sender, NewFrameEventArgs e)
        {
            try
            {
                if (lockRect.IsEmpty)
                    lockRect = new System.Drawing.Rectangle(0, 0, e.Frame.Width, e.Frame.Height);

                bitmap = (Bitmap)e.Frame.Clone();
                bitmapData = bitmap.LockBits(lockRect, ImageLockMode.ReadOnly, System.Drawing.Imaging.PixelFormat.Format24bppRgb);

                Console.WriteLine(bitmapData.Scan0);

                if (request == null) return;
                IEStatusCode code = request.Wait(0);
                Console.WriteLine(code);
                if (code == IEStatusCode.INFER_NOT_STARTED)
                    ResetRequest(bitmapData);

                if(code == IEStatusCode.OK)
                {
                    HandleInferResults(request);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Capture Device New Frame Event Handler Error: {0}", ex.Message);
            }
        }


        string modelFile = @"E:\2020\008_AI\OpenVINO&OpenCV Modules\OpenVINO_CV\x64\Release\models\face-detection-retail-0044\FP32\face-detection-retail-0044.xml";
        //string modelFile = @"E:\2020\008_AI\OpenVINO&OpenCV Modules\OpenVINO_CV\x64\Release\models\face-detection-0105\FP32\face-detection-0105.xml";

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            LoadOpenVINO(modelFile, "CPU");
        }

        private void HandleInferResults(InferRequest request)
        {
            Console.WriteLine("ok");

            Blob outputBlob = request.GetBlob(outputs[0].Name);
            IntPtr buffer = outputBlob.Buffer;

            results.Clear();
            for (int i = 0; i < 200; i++)
            {
                Result7 result = (Result7)Marshal.PtrToStructure(buffer + (i * 7 * 4), typeof(Result7));

                if (result.image_id < 0) break;
                if (result.conf >= 0.5)
                {
                    results.Add(result);
                }
            }

            bitmap.UnlockBits(bitmapData);

            Bitmap bmp = (Bitmap)bitmap.Clone();
            Graphics g = Graphics.FromImage(bmp);
            for (int i = 0; i < results.Count; i++)
            {
                int x = (int)(results[i].x_min * bmp.Width);
                int y = (int)(results[i].y_min * bmp.Height);
                int w = (int)(results[i].x_max * bmp.Width) - x;
                int h = (int)(results[i].y_max * bmp.Height) - y;
                System.Drawing.Rectangle rect = new System.Drawing.Rectangle(x, y, w, h);

                g.DrawRectangle(new System.Drawing.Pen(System.Drawing.Color.Red, 2), rect);
            }

            Image.Dispatcher.BeginInvoke((Action) delegate()
            {
                Image.Source = ChangeBitmapToImageSource(bmp);
            });
            
            ResetRequest(bitmapData);
        }


        [System.Runtime.InteropServices.DllImport("gdi32.dll")]
        public static extern bool DeleteObject(IntPtr hObject);
        public static ImageSource ChangeBitmapToImageSource(Bitmap bitmap)
        {
            IntPtr hBitmap = bitmap.GetHbitmap();
            ImageSource wpfBitmap = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(
                hBitmap,
                IntPtr.Zero,
                Int32Rect.Empty,
                BitmapSizeOptions.FromEmptyOptions());

            if (!DeleteObject(hBitmap))
            {
                throw new System.ComponentModel.Win32Exception();
            }
            //GC.Collect();

            return wpfBitmap;
        }
    }
}
